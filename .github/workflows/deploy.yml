name: Deploy to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
      ECS_SERVICE: ${{ vars.ECS_SERVICE }}
      TASK_FAMILY: poc-spring-redis-task
      IMAGE_TAG: ${{ github.sha }}
      IMAGE_TAG_LATEST: latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsECRDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}
          docker build --no-cache -t $IMAGE:${{ env.IMAGE_TAG }} .
          docker tag $IMAGE:${{ env.IMAGE_TAG }} $IMAGE:${{ env.IMAGE_TAG_LATEST }}
          docker push $IMAGE:${{ env.IMAGE_TAG }}
          docker push $IMAGE:${{ env.IMAGE_TAG_LATEST }}

      - name: Export current ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition "${{ env.TASK_FAMILY }}" \
            --query 'taskDefinition | {
              family: family,
              networkMode: networkMode,
              requiresCompatibilities: requiresCompatibilities,
              cpu: cpu,
              memory: memory,
              executionRoleArn: executionRoleArn,
              containerDefinitions: [{
                name: containerDefinitions[0].name,
                image: containerDefinitions[0].image,
                essential: containerDefinitions[0].essential,
                portMappings: containerDefinitions[0].portMappings,
                environment: containerDefinitions[0].environment,
                logConfiguration: containerDefinitions[0].logConfiguration
              }]
            }' > ecs-task-def.json

      - name: Render task definition with new image
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: spring-redis-app
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
