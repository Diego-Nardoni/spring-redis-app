server:
  port: 8080
  servlet:
    session:
      timeout: 30m

spring:
  application:
    name: modern-redis-session-manager
  
  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
      password: ${SPRING_REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          max-wait: 2000ms
        shutdown-timeout: 100ms
  
  session:
    store-type: redis
    redis:
      namespace: "modern:session"
      flush-mode: on_save
      save-mode: on_set_attribute
  
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    redis:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 10ms, 50ms, 100ms, 200ms, 500ms

resilience4j:
  circuitbreaker:
    instances:
      redis:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
        record-exceptions:
          - org.springframework.data.redis.RedisConnectionFailureException
          - org.springframework.data.redis.RedisSystemException
          - java.util.concurrent.TimeoutException
  retry:
    instances:
      redis:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.springframework.data.redis.RedisConnectionFailureException
          - java.util.concurrent.TimeoutException

app:
  container:
    id: ${HOSTNAME:local-container}
  region: ${AWS_REGION:us-east-1}
  
logging:
  level:
    com.modernapp: DEBUG
    org.springframework.session: DEBUG
    org.springframework.data.redis: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} %5p [%t] %-40.40logger{39} : %m%n"
